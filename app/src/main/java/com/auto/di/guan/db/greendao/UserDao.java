package com.auto.di.guan.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.auto.di.guan.db.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, Long.class, "userId", false, "userId");
        public final static Property LoginName = new Property(2, String.class, "loginName", false, "loginName");
        public final static Property UserName = new Property(3, String.class, "userName", false, "userName");
        public final static Property Email = new Property(4, String.class, "email", false, "email");
        public final static Property Phonenumber = new Property(5, String.class, "phonenumber", false, "phonenumber");
        public final static Property Sex = new Property(6, String.class, "sex", false, "sex");
        public final static Property Avatar = new Property(7, String.class, "avatar", false, "avatar");
        public final static Property Password = new Property(8, String.class, "password", false, "password");
        public final static Property Status = new Property(9, String.class, "status", false, "status");
        public final static Property ProjectId = new Property(10, String.class, "projectId", false, "projectId");
        public final static Property ProjectGroupId = new Property(11, String.class, "projectGroupId", false, "projectGroupId");
        public final static Property TrunkPipeNum = new Property(12, Integer.class, "trunkPipeNum", false, "trunkPipeNum");
        public final static Property PileOutNum = new Property(13, Integer.class, "pileOutNum", false, "pileOutNum");
        public final static Property ProjectName = new Property(14, String.class, "projectName", false, "projectName");
        public final static Property ProjectDesc = new Property(15, String.class, "projectDesc", false, "projectDesc");
        public final static Property ProjectRemarks = new Property(16, String.class, "projectRemarks", false, "projectRemarks");
        public final static Property LongitudeLatitude = new Property(17, String.class, "longitudeLatitude", false, "longitudeLatitude");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"userId\" INTEGER," + // 1: userId
                "\"loginName\" TEXT," + // 2: loginName
                "\"userName\" TEXT," + // 3: userName
                "\"email\" TEXT," + // 4: email
                "\"phonenumber\" TEXT," + // 5: phonenumber
                "\"sex\" TEXT," + // 6: sex
                "\"avatar\" TEXT," + // 7: avatar
                "\"password\" TEXT," + // 8: password
                "\"status\" TEXT," + // 9: status
                "\"projectId\" TEXT," + // 10: projectId
                "\"projectGroupId\" TEXT," + // 11: projectGroupId
                "\"trunkPipeNum\" INTEGER," + // 12: trunkPipeNum
                "\"pileOutNum\" INTEGER," + // 13: pileOutNum
                "\"projectName\" TEXT," + // 14: projectName
                "\"projectDesc\" TEXT," + // 15: projectDesc
                "\"projectRemarks\" TEXT," + // 16: projectRemarks
                "\"longitudeLatitude\" TEXT);"); // 17: longitudeLatitude
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        String loginName = entity.getLoginName();
        if (loginName != null) {
            stmt.bindString(3, loginName);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(4, userName);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(5, email);
        }
 
        String phonenumber = entity.getPhonenumber();
        if (phonenumber != null) {
            stmt.bindString(6, phonenumber);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(7, sex);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(8, avatar);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(9, password);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(10, status);
        }
 
        String projectId = entity.getProjectId();
        if (projectId != null) {
            stmt.bindString(11, projectId);
        }
 
        String projectGroupId = entity.getProjectGroupId();
        if (projectGroupId != null) {
            stmt.bindString(12, projectGroupId);
        }
 
        Integer trunkPipeNum = entity.getTrunkPipeNum();
        if (trunkPipeNum != null) {
            stmt.bindLong(13, trunkPipeNum);
        }
 
        Integer pileOutNum = entity.getPileOutNum();
        if (pileOutNum != null) {
            stmt.bindLong(14, pileOutNum);
        }
 
        String projectName = entity.getProjectName();
        if (projectName != null) {
            stmt.bindString(15, projectName);
        }
 
        String projectDesc = entity.getProjectDesc();
        if (projectDesc != null) {
            stmt.bindString(16, projectDesc);
        }
 
        String projectRemarks = entity.getProjectRemarks();
        if (projectRemarks != null) {
            stmt.bindString(17, projectRemarks);
        }
 
        String longitudeLatitude = entity.getLongitudeLatitude();
        if (longitudeLatitude != null) {
            stmt.bindString(18, longitudeLatitude);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        String loginName = entity.getLoginName();
        if (loginName != null) {
            stmt.bindString(3, loginName);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(4, userName);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(5, email);
        }
 
        String phonenumber = entity.getPhonenumber();
        if (phonenumber != null) {
            stmt.bindString(6, phonenumber);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(7, sex);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(8, avatar);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(9, password);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(10, status);
        }
 
        String projectId = entity.getProjectId();
        if (projectId != null) {
            stmt.bindString(11, projectId);
        }
 
        String projectGroupId = entity.getProjectGroupId();
        if (projectGroupId != null) {
            stmt.bindString(12, projectGroupId);
        }
 
        Integer trunkPipeNum = entity.getTrunkPipeNum();
        if (trunkPipeNum != null) {
            stmt.bindLong(13, trunkPipeNum);
        }
 
        Integer pileOutNum = entity.getPileOutNum();
        if (pileOutNum != null) {
            stmt.bindLong(14, pileOutNum);
        }
 
        String projectName = entity.getProjectName();
        if (projectName != null) {
            stmt.bindString(15, projectName);
        }
 
        String projectDesc = entity.getProjectDesc();
        if (projectDesc != null) {
            stmt.bindString(16, projectDesc);
        }
 
        String projectRemarks = entity.getProjectRemarks();
        if (projectRemarks != null) {
            stmt.bindString(17, projectRemarks);
        }
 
        String longitudeLatitude = entity.getLongitudeLatitude();
        if (longitudeLatitude != null) {
            stmt.bindString(18, longitudeLatitude);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // loginName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // email
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // phonenumber
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // sex
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // avatar
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // password
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // status
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // projectId
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // projectGroupId
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // trunkPipeNum
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // pileOutNum
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // projectName
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // projectDesc
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // projectRemarks
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // longitudeLatitude
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setLoginName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEmail(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPhonenumber(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSex(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAvatar(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPassword(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setStatus(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setProjectId(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setProjectGroupId(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setTrunkPipeNum(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setPileOutNum(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setProjectName(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setProjectDesc(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setProjectRemarks(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setLongitudeLatitude(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
