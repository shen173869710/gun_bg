package com.auto.di.guan.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.auto.di.guan.db.ControlConvert;
import java.util.ArrayList;

import com.auto.di.guan.db.DeviceInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEVICE_INFO".
*/
public class DeviceInfoDao extends AbstractDao<DeviceInfo, Long> {

    public static final String TABLENAME = "DEVICE_INFO";

    /**
     * Properties of entity DeviceInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DeviceName = new Property(1, String.class, "deviceName", false, "deviceName");
        public final static Property DeviceId = new Property(2, int.class, "deviceId", false, "deviceId");
        public final static Property DeviceSort = new Property(3, int.class, "deviceSort", false, "deviceSort");
        public final static Property ProtocalId = new Property(4, String.class, "protocalId", false, "PROTOCAL_ID");
        public final static Property UserId = new Property(5, int.class, "userId", false, "userId");
        public final static Property DeviceImagePath = new Property(6, String.class, "deviceImagePath", false, "deviceImagePath");
        public final static Property CreateTime = new Property(7, String.class, "createTime", false, "createTime");
        public final static Property CreateBy = new Property(8, String.class, "createBy", false, "createBy");
        public final static Property ElectricQuantity = new Property(9, int.class, "electricQuantity", false, "electricQuantity");
        public final static Property DeviceStatus = new Property(10, int.class, "deviceStatus", false, "deviceStatus");
        public final static Property Remark = new Property(11, String.class, "remark", false, "remark");
        public final static Property ValveDeviceSwitchList = new Property(12, String.class, "valveDeviceSwitchList", false, "valveDeviceSwitchList");
    }

    private final ControlConvert valveDeviceSwitchListConverter = new ControlConvert();

    public DeviceInfoDao(DaoConfig config) {
        super(config);
    }
    
    public DeviceInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEVICE_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"deviceName\" TEXT," + // 1: deviceName
                "\"deviceId\" INTEGER NOT NULL ," + // 2: deviceId
                "\"deviceSort\" INTEGER NOT NULL ," + // 3: deviceSort
                "\"PROTOCAL_ID\" TEXT," + // 4: protocalId
                "\"userId\" INTEGER NOT NULL ," + // 5: userId
                "\"deviceImagePath\" TEXT," + // 6: deviceImagePath
                "\"createTime\" TEXT," + // 7: createTime
                "\"createBy\" TEXT," + // 8: createBy
                "\"electricQuantity\" INTEGER NOT NULL ," + // 9: electricQuantity
                "\"deviceStatus\" INTEGER NOT NULL ," + // 10: deviceStatus
                "\"remark\" TEXT," + // 11: remark
                "\"valveDeviceSwitchList\" TEXT);"); // 12: valveDeviceSwitchList
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEVICE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DeviceInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String deviceName = entity.getDeviceName();
        if (deviceName != null) {
            stmt.bindString(2, deviceName);
        }
        stmt.bindLong(3, entity.getDeviceId());
        stmt.bindLong(4, entity.getDeviceSort());
 
        String protocalId = entity.getProtocalId();
        if (protocalId != null) {
            stmt.bindString(5, protocalId);
        }
        stmt.bindLong(6, entity.getUserId());
 
        String deviceImagePath = entity.getDeviceImagePath();
        if (deviceImagePath != null) {
            stmt.bindString(7, deviceImagePath);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(8, createTime);
        }
 
        String createBy = entity.getCreateBy();
        if (createBy != null) {
            stmt.bindString(9, createBy);
        }
        stmt.bindLong(10, entity.getElectricQuantity());
        stmt.bindLong(11, entity.getDeviceStatus());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(12, remark);
        }
 
        ArrayList valveDeviceSwitchList = entity.getValveDeviceSwitchList();
        if (valveDeviceSwitchList != null) {
            stmt.bindString(13, valveDeviceSwitchListConverter.convertToDatabaseValue(valveDeviceSwitchList));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DeviceInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String deviceName = entity.getDeviceName();
        if (deviceName != null) {
            stmt.bindString(2, deviceName);
        }
        stmt.bindLong(3, entity.getDeviceId());
        stmt.bindLong(4, entity.getDeviceSort());
 
        String protocalId = entity.getProtocalId();
        if (protocalId != null) {
            stmt.bindString(5, protocalId);
        }
        stmt.bindLong(6, entity.getUserId());
 
        String deviceImagePath = entity.getDeviceImagePath();
        if (deviceImagePath != null) {
            stmt.bindString(7, deviceImagePath);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(8, createTime);
        }
 
        String createBy = entity.getCreateBy();
        if (createBy != null) {
            stmt.bindString(9, createBy);
        }
        stmt.bindLong(10, entity.getElectricQuantity());
        stmt.bindLong(11, entity.getDeviceStatus());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(12, remark);
        }
 
        ArrayList valveDeviceSwitchList = entity.getValveDeviceSwitchList();
        if (valveDeviceSwitchList != null) {
            stmt.bindString(13, valveDeviceSwitchListConverter.convertToDatabaseValue(valveDeviceSwitchList));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DeviceInfo readEntity(Cursor cursor, int offset) {
        DeviceInfo entity = new DeviceInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // deviceName
            cursor.getInt(offset + 2), // deviceId
            cursor.getInt(offset + 3), // deviceSort
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // protocalId
            cursor.getInt(offset + 5), // userId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // deviceImagePath
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // createTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // createBy
            cursor.getInt(offset + 9), // electricQuantity
            cursor.getInt(offset + 10), // deviceStatus
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // remark
            cursor.isNull(offset + 12) ? null : valveDeviceSwitchListConverter.convertToEntityProperty(cursor.getString(offset + 12)) // valveDeviceSwitchList
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DeviceInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDeviceName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDeviceId(cursor.getInt(offset + 2));
        entity.setDeviceSort(cursor.getInt(offset + 3));
        entity.setProtocalId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUserId(cursor.getInt(offset + 5));
        entity.setDeviceImagePath(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCreateTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCreateBy(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setElectricQuantity(cursor.getInt(offset + 9));
        entity.setDeviceStatus(cursor.getInt(offset + 10));
        entity.setRemark(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setValveDeviceSwitchList(cursor.isNull(offset + 12) ? null : valveDeviceSwitchListConverter.convertToEntityProperty(cursor.getString(offset + 12)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DeviceInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DeviceInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DeviceInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
